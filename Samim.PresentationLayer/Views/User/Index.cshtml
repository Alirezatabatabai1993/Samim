@using Samim.PresentationLayer;
@model Samim.ViewModel.VMUser
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>
    .inner-addon {
        position: relative;
    }

        .inner-addon .fa {
            position: absolute;
            padding: 10px;
        }

    .right-addon .fa {
        right: 0px;
    }

    .right-addon input {
        padding-right: 30px;
    }

    .sortArrow {
        margin-left: 4px;
    }

    .pagination {
        margin-top: 10%;
    }
</style>

<h1>Users</h1>

<button onclick="OpenCreateModal()" class="btn float-right"><span class="fa fa-user-plus"></span></button>

<table id="userGrid" class="table">
    <thead>
        <tr class="table-primary">
            <th scope="col">
                #<span onclick="SortFunction('sortBasedOnNumber','RowNumber')" id="sortBasedOnNumber" class="sortArrow fa fa-arrow-down fa-xs"></span>
            </th>
            <th scope="row">
                First Name<span onclick="SortFunction('sortBasedOnFirstName','FirstName')" id="sortBasedOnFirstName" class="sortArrow fa fa-arrow-right fa-xs"></span>
            </th>
            <th scope="row">
                Last Name<span onclick="SortFunction('sortBasedOnLastName','LastName')" id="sortBasedOnLastName" class="sortArrow fa fa-arrow-right fa-xs"></span>
            </th>
            <th scope="col">
                User Name<span onclick="SortFunction('sortBasedOnUserName','UserName')" id="sortBasedOnUserName" class="sortArrow fa fa-arrow-right fa-xs"></span>
            </th>
            <th scope="col">
                Email
            </th>
            <th scope="col">
                Phone Number
            </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    @foreach (var item in Model.Users)
    {
        <tbody id="userGridtbody">
            <tr>
                <td scope="row">
                    @item.RowNumber
                </td>
                <td scope="row">
                    @item.FirstName
                </td>
                <td scope="row">
                    @item.LastName
                </td>
                <td scope="row">
                    @item.UserName
                </td>
                <td scope="row">
                    @item.Email
                </td>
                <td scope="row">
                    @item.PhoneNumber
                </td>
                <td>
                    <button class="btn-danger" onclick="OpenDeleteModal('@item.Id','@item.UserName')"><span class="fa fa-trash-o fa-sm"></span></button>
                </td>
                <td>
                    <button class="btn-primary" onclick="OpenEditModal('@item.Id','@item.UserName')"><span class="fa fa-pencil-square-o fa-sm"></span></button>
                </td>
            </tr>
        </tbody>
    }
</table>



<nav aria-label="Page navigation example">
    <ul class="pagination pagination-sm justify-content-center">
        <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
            <a class="page-link" href="@(SamimRouteManager.User.Index() + "?pageNumber=" + (Model.CurrentPageNumber - 1).ToString())" tabindex="-1">Previous</a>
        </li>
        @if (Model.CurrentPageNumber != Model.FirstPage)
        {
            <li class="page-item">
                <a class="page-link" href="@(SamimRouteManager.User.Index() + "?pageNumber=" + Model.FirstPage.ToString())" tabindex="-1">@Model.FirstPage</a>
            </li>
        }
        @if (Model.HasTwoPreviousPage)
        {
            <li class="page-item disabled">
                <a class="page-link" tabindex="-1"><span class="fa fa-ellipsis-h"></span></a>
            </li>
        }
        @if (Model.HasPreviousPage && Model.CurrentPageNumber - 1 != Model.FirstPage)
        {
            <li class="page-item">
                <a class="page-link" href="@(SamimRouteManager.User.Index() + "?pageNumber=" + (Model.CurrentPageNumber - 1).ToString())">@(Model.CurrentPageNumber - 1)</a>
            </li>
        }
        <li class="page-item active">
            <a class="page-link" href="@(SamimRouteManager.User.Index() + "?pageNumber=" + Model.CurrentPageNumber.ToString())">@Model.CurrentPageNumber</a>
        </li>
        @if (Model.HasNextPage && Model.CurrentPageNumber + 1 != Model.LastPage)
        {
            <li class="page-item">
                <a class="page-link" href="@(SamimRouteManager.User.Index() + "?pageNumber=" + (Model.CurrentPageNumber + 1).ToString())">@(Model.CurrentPageNumber + 1)</a>
            </li>
        }
        @if (Model.HasTwoNextPage)
        {
            <li class="page-item disabled">
                <a class="page-link" tabindex="-1"><span class="fa fa-ellipsis-h"></span></a>
            </li>
        }
        @if (Model.CurrentPageNumber != Model.LastPage)
        {
            <li class="page-item">
                <a class="page-link" href="@(SamimRouteManager.User.Index() + "?pageNumber=" + Model.LastPage)" tabindex="-1">@Model.LastPage</a>
            </li>
        }
        <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
            <a class="page-link" href="@(SamimRouteManager.User.Index() + "?pageNumber=" + (Model.CurrentPageNumber + 1).ToString())">Next</a>
        </li>
    </ul>
</nav>


<div id="CreateAndEditModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 id="CreateAndEditModalTitle" class="modal-title"></h4>
                <button type="button" class="btn btn-default float-right" data-dismiss="modal"><span class="fa fa-times"></span></button>
            </div>
            <div id="CreateAndEditModalBody" class="modal-body">
            </div>
        </div>
    </div>
</div>

<div id="DeleteModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 id="deleteModalTitle" class="modal-title"></h4>
                <button type="button" class="btn btn-default float-right" data-dismiss="modal"><span class="fa fa-times"></span></button>
            </div>
            <div id="deleteModalBody" class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" id="deleteButton" class="btn btn-danger float-right" onclick="DeleteButtonClicked()"><span class="fa fa-check"></span></button>
                <button type="button" class="btn btn-primary float-right" data-dismiss="modal"><span class="fa fa-ban"></span></button>
            </div>
        </div>
    </div>
</div>
<input id="EditingAnddeletingItemId" type="hidden" />

<div id="EditPasswordModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 id="EditPasswordModalTitle" class="modal-title"></h4>
                <button type="button" class="btn btn-default float-right" data-dismiss="modal"><span class="fa fa-times"></span></button>
            </div>
            <div id="EditPasswordModalBody" class="modal-body">
            </div>
        </div>
    </div>
</div>
<input id="NewPasswordValue" type="hidden" />

<input id="pageNumber" type="hidden" value="@Model.CurrentPageNumber"/>

<script type="text/javascript">

    function MakeTableRowsBasedOnSelectedSortMethodFunction(rows) {
         for (var i = 0; i < rows.length; i++) {
                        var row = rows[i];
                        row.email = row.email == null ? "" : row.email;
                        row.phoneNumber = row.phoneNumber == null ? "" : row.phoneNumber;
                        $('#userGridtbody').append
                            ("<tr>"+
                            "<td>" + row.rowNumber   + "</td>" +
                            "<td>" + row.firstName   + "</td>" +
                            "<td>" + row.lastName    + "</td>" +
                            "<td>" + row.userName    + "</td>" +
                            "<td>" + row.email       + "</td>" +
                            "<td>" + row.phoneNumber + "</td>" +
                            "<td>" + '<button class="btn-danger" onclick="OpenDeleteModal(' + "'" + row.id + "'" + ',' + "'" + row.userName + "'" + ')"><span class="fa fa-trash-o fa-sm"></span></button>'        + "</td>" +
                            "<td>" + '<button class="btn-primary" onclick="OpenEditModal(' + "'" + row.id + "'" + ',' + "'" + row.userName + "'" + ')"><span class="fa fa-pencil-square-o fa-sm"></span></button>' + "</td>" +
                            "</tr>");
         }
    }

    function MakeOtherSortArrowsToPointRight(SelectedSort) {
        var sortBasedOnNumber = document.getElementById("sortBasedOnNumber");
        if (!(sortBasedOnNumber == SelectedSort)) {
            if (sortBasedOnNumber.classList.contains("fa-arrow-up")) {
                sortBasedOnNumber.classList.replace("fa-arrow-up", "fa-arrow-right");
            } else if (sortBasedOnNumber.classList.contains("fa-arrow-down")) {
                sortBasedOnNumber.classList.replace("fa-arrow-down", "fa-arrow-right");
            }
        }

        var sortBasedOnFirstName = document.getElementById("sortBasedOnFirstName");
        if (!(sortBasedOnFirstName == SelectedSort)) {
            if (sortBasedOnFirstName.classList.contains("fa-arrow-up")) {
                sortBasedOnFirstName.classList.replace("fa-arrow-up", "fa-arrow-right");
            }else if (sortBasedOnFirstName.classList.contains("fa-arrow-down")) {
                sortBasedOnFirstName.classList.replace("fa-arrow-down", "fa-arrow-right");
            }
        }

        var sortBasedOnLastName = document.getElementById("sortBasedOnLastName");
        if (!(sortBasedOnLastName == SelectedSort)) {
            if (sortBasedOnLastName.classList.contains("fa-arrow-up")) {
                sortBasedOnLastName.classList.replace("fa-arrow-up", "fa-arrow-right");
            }else if (sortBasedOnLastName.classList.contains("fa-arrow-down")) {
                sortBasedOnLastName.classList.replace("fa-arrow-down", "fa-arrow-right");
            }
        }

        var sortBasedOnUserName = document.getElementById("sortBasedOnUserName");
        if (!(sortBasedOnUserName == SelectedSort)) {
            if (sortBasedOnUserName.classList.contains("fa-arrow-up")) {
                sortBasedOnUserName.classList.replace("fa-arrow-up", "fa-arrow-right");
            }else if (sortBasedOnUserName.classList.contains("fa-arrow-down")) {
                sortBasedOnUserName.classList.replace("fa-arrow-down", "fa-arrow-right");
            }
        }
    }

    function SortFunction(sortBasedOn, orderBy) {
        var sortArrow = document.getElementById(sortBasedOn);
        var pageNumberValue = $("#pageNumber").val();
        MakeOtherSortArrowsToPointRight(sortArrow);
        if (sortArrow.classList.contains("fa-arrow-up") || sortArrow.classList.contains("fa-arrow-right")) {
            $.ajax({
                type: "GET",
                url: "@SamimRouteManager.User.Index()",
                data: "orderBy=" + orderBy + "&orderType=ASC" + "&pageNumber=" + pageNumberValue,
                success: function (response) {
                    $('#userGridtbody tr').remove();
                    MakeTableRowsBasedOnSelectedSortMethodFunction(response.rows);
                }
            });
            if (sortArrow.classList.contains("fa-arrow-up")) {
                sortArrow.classList.replace("fa-arrow-up", "fa-arrow-down");
            } else if (sortArrow.classList.contains("fa-arrow-right")) {
                sortArrow.classList.replace("fa-arrow-right", "fa-arrow-down");
            }
        }
        else {
            $.ajax({
                type: "GET",
                url: "@SamimRouteManager.User.Index()",
                data: "orderBy=" + orderBy + "&orderType=DESC" + "&pageNumber=" + pageNumberValue,
                success: function (response) {
                    $('#userGridtbody tr').remove();
                    MakeTableRowsBasedOnSelectedSortMethodFunction(response.rows);
                }
            });
            if (sortArrow.classList.contains("fa-arrow-down")) {
                sortArrow.classList.replace("fa-arrow-down", "fa-arrow-up");
            } else if (sortArrow.classList.contains("fa-arrow-right")) {
                sortArrow.classList.replace("fa-arrow-right", "fa-arrow-up");
            }
		}
	}

	function EyeButtonMouseDownFunction() {
		document.getElementById("passwordInput").type = "text";
	}

	function EyeButtonMouseUpFunction() {
		document.getElementById("passwordInput").type = "password";
	}

	function SetNewPasswordToHiddenInput(pass) {
		$("#NewPasswordValue").val(pass);
	}

	$(document).ready(function () {
		$('#CreateAndEditModal').on('hidden.bs.modal', function (e) {
			$('#CreateAndEditForm').trigger("reset");
			$('#CreateAndEditForm').find("span.validation").html("").replaceAll();
		})
	})

	function OpenEditPasswordModal() {
		var id = $("#EditingAnddeletingItemId").val();
		$.ajax({
			type: "GET",
			url: "@SamimRouteManager.User.EditPassword()",
			data: { id: id },
			success: function (response) {
				$("#EditPasswordModalBody").html(response);
				$("#CreateAndEditModal").modal("hide");
				$("#EditPasswordModal").modal("show");
			}
		});
	}

	function OpenDeleteModal(Id, UserName) {
		$("#deleteModalTitle").html("Delete " + UserName);
		$("#deleteModalBody").html("Are you positive about deleting " + UserName + " ?");
		$("#EditingAnddeletingItemId").val(Id);
		$("#DeleteModal").modal();
	}

	function DeleteButtonClicked() {
		var id = document.getElementById("EditingAnddeletingItemId").value;
		$.ajax({
			type: "POST",
			data: { id: id },
			url: "@SamimRouteManager.User.Delete()",
			success: function (response) {
				if (response.success) {
					window.location.reload();
				}
			}
		})
	}

	function OpenEditModal(id,userName) {
		$("#CreateAndEditModalTitle").html("Edit " + userName);
		$("#EditingAnddeletingItemId").val(id);
		$.ajax({
			type: "GET",
			url: "@SamimRouteManager.User.Edit()",
			data: { id: id },
			success: function (response) {
				$("#CreateAndEditModalBody").html(response);
				$("#CreateAndEditModal").modal("show");
			}
		});
	}

	function EditButtonClicked() {
		var CreateAndEditForm = $("#CreateAndEditForm");
		var createAndEditFormSerializedData = CreateAndEditForm.serialize();
		var hiddenPasswordValue = $("#NewPasswordValue").val();
		var data = createAndEditFormSerializedData+"&password="+ hiddenPasswordValue;
		var modal = $("#CreateAndEditModal");
		$.ajax({
			type: "POST",
			data: data ,
			url:"@SamimRouteManager.User.Edit()",
			success: function (response) {
				CreateAndEditForm.find("span.validation").html("").replaceAll();
				var errors = response.errors;
				if (response.success) {
					modal.modal("hide");
					window.location.reload();
				}
				else {
					for (var i = 0; i < errors.length; i++) {
						var spanElement = document.getElementById("span" + errors[i].key);
						spanElement.innerHTML = errors[i].value;
					}
				}
			}
		});
	}

	function OpenCreateModal() {
		$("#CreateAndEditModalTitle").html("Create User");
		$.ajax({
			type: "GET",
			url: "@SamimRouteManager.User.Create()",
			success: function (response) {
				$("#CreateAndEditModalBody").html(response);
				$("#CreateAndEditModal").modal("show");
			}
		});
	}

	function SubmitButtonClicked() {
		var CreateAndEditForm = $("#CreateAndEditForm");
		var createFormSerializedData = CreateAndEditForm.serialize();
		var modal = $("#CreateAndEditModal");
		$.ajax({
			type: "POST",
			data: createFormSerializedData,
			url:"@SamimRouteManager.User.Create()",
			success: function (response) {
				CreateAndEditForm.find("span.validation").html("").replaceAll();
				var errors = response.errors;
				if (response.success) {
					modal.modal("hide");
					window.location.reload();
				}
				else {
					for (var i = 0; i < errors.length; i++) {
						var spanElement = document.getElementById("span" + errors[i].key);
						spanElement.innerHTML = errors[i].value;
					}
				}
			}
		});
	}
</script>